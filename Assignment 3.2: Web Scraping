{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMCyv7epXEGw5NG2PfDUGAR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ar8k/Assigment-2.2-CSS-Text-Styling/blob/main/Untitled1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import pandas as pd\n",
        "import time\n"
      ],
      "metadata": {
        "id": "h5xJCJ0qBDRD"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "base_url = \"https://books.toscrape.com/catalogue/page-{}.html\"  # URL template\n",
        "\n",
        "#empty lists for data\n",
        "titles = []\n",
        "prices = []\n",
        "availabilities = []\n",
        "ratings = []\n",
        "\n",
        "#converting ratings from words to numbers (one = 1)\n",
        "rating_map = { 'One' : 1, 'Two' : 2, 'Three' : 3, 'Four' : 4, 'Five' : 5}\n",
        "\n",
        "#for each page between 1 to 50 do the following...\n",
        "for page in range(1, 51):\n",
        "    url = base_url.format(page)\n",
        "    response = requests.get(url)\n",
        "\n",
        "    if response.status_code != 200:\n",
        "        print(f\"Page {page} not found, stopping.\")\n",
        "        break\n",
        "\n",
        "    #parse page HTML\n",
        "    soup = BeautifulSoup(response.content.decode('utf-8', 'ignore'), 'html.parser')\n",
        "    books = soup.find_all('article', class_='product_pod')\n",
        "\n",
        "    #loop through each book and get the info\n",
        "    for book in books:\n",
        "        try:\n",
        "            title = book.h3.a['title']\n",
        "            price_text = book.find('p', class_='price_color').text\n",
        "            price = float(price_text.replace('Â£', '').strip())\n",
        "            availability = book.find('p', class_='instock availability').text.strip()\n",
        "            rating_class = book.find('p', class_='star-rating')['class']\n",
        "            rating_word = [r for r in rating_class if r != 'star-rating'][0]\n",
        "            rating = rating_map.get(rating_word, None)\n",
        "\n",
        "            #appending the data to the titles\n",
        "            titles.append(title)\n",
        "            prices.append(price)\n",
        "            availabilities.append(availability)\n",
        "            ratings.append(rating)\n",
        "        except Exception as e:\n",
        "            print(f\"Skipping book on page {page} due to error: {e}\")\n",
        "            continue\n",
        "\n",
        "    print(f\"Scraped page {page}\")\n",
        "    time.sleep(1)  #2 secs pause for the server\n",
        "\n",
        "#making a dataframe for the data I got\n",
        "df = pd.DataFrame({\n",
        "    'Title': titles,\n",
        "    'Price': prices,\n",
        "    'Availability': availabilities,\n",
        "    'Rating': ratings\n",
        "})\n",
        "\n",
        "print(\"Scraping complete. Dataset Size:\", df.shape)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RaAKXH1gBP6H",
        "outputId": "5f15e5d2-2d75-40f4-fd91-9abe59e996b0"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Scraped page 1\n",
            "Scraped page 2\n",
            "Scraped page 3\n",
            "Scraped page 4\n",
            "Scraped page 5\n",
            "Scraped page 6\n",
            "Scraped page 7\n",
            "Scraped page 8\n",
            "Scraped page 9\n",
            "Scraped page 10\n",
            "Scraped page 11\n",
            "Scraped page 12\n",
            "Scraped page 13\n",
            "Scraped page 14\n",
            "Scraped page 15\n",
            "Scraped page 16\n",
            "Scraped page 17\n",
            "Scraped page 18\n",
            "Scraped page 19\n",
            "Scraped page 20\n",
            "Scraped page 21\n",
            "Scraped page 22\n",
            "Scraped page 23\n",
            "Scraped page 24\n",
            "Scraped page 25\n",
            "Scraped page 26\n",
            "Scraped page 27\n",
            "Scraped page 28\n",
            "Scraped page 29\n",
            "Scraped page 30\n",
            "Scraped page 31\n",
            "Scraped page 32\n",
            "Scraped page 33\n",
            "Scraped page 34\n",
            "Scraped page 35\n",
            "Scraped page 36\n",
            "Scraped page 37\n",
            "Scraped page 38\n",
            "Scraped page 39\n",
            "Scraped page 40\n",
            "Scraped page 41\n",
            "Scraped page 42\n",
            "Scraped page 43\n",
            "Scraped page 44\n",
            "Scraped page 45\n",
            "Scraped page 46\n",
            "Scraped page 47\n",
            "Scraped page 48\n",
            "Scraped page 49\n",
            "Scraped page 50\n",
            "Scraping complete. Dataset Size: (1000, 4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.What is the size of the dataset?"
      ],
      "metadata": {
        "id": "mZWejnA5_SJ2"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y3wJc36B_NbB",
        "outputId": "a1bbc766-5724-4bd6-c38a-20b2203b8c55"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset shape (rows, columns) (1000, 4)\n"
          ]
        }
      ],
      "source": [
        "print(\"Dataset shape (rows, columns)\", df.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.What are the names and data types of each column?"
      ],
      "metadata": {
        "id": "CIIxltFp_UX1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Column names and data types:\")\n",
        "print(df.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mCbEbG0A_U-9",
        "outputId": "59c89b36-fddd-4e17-86bd-78d7ebf5b78b"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Column names and data types:\n",
            "Title            object\n",
            "Price           float64\n",
            "Availability     object\n",
            "Rating            int64\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3.How many unique values are there for each categorical variable?"
      ],
      "metadata": {
        "id": "XtP7nWXg_VaP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Unique values in categorical columns:\")\n",
        "categorical_cols = ['Title', 'Availability']\n",
        "for col in categorical_cols:\n",
        "  print(f\"{col}: {df[col].nunique()} unique values\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9ngk6sr0_Vtd",
        "outputId": "3160c7bb-e8ce-431d-90df-8066596b964e"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unique values in categorical columns:\n",
            "Title: 999 unique values\n",
            "Availability: 1 unique values\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.If there is any numerical value in the dataset, what are the minimum and maximum values for it?\n"
      ],
      "metadata": {
        "id": "Cj-7AgXJ_WE3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (\"Price Range: \")\n",
        "print(\"Min Price: \", df['Price'].min())\n",
        "print(\"Max Price: \", df['Price'].max())\n",
        "print(\"Rating Range: \")\n",
        "print(\"Min Rating\", df['Rating'].min())\n",
        "print(\"Max Rating\", df['Rating'].max())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sh6WWAxn_WWW",
        "outputId": "2bd8bd65-0941-41f8-b134-cfec7ef7b018"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Price Range: \n",
            "Min Price:  10.0\n",
            "Max Price:  59.99\n",
            "Rating Range: \n",
            "Min Rating 1\n",
            "Max Rating 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5.Drop rows that have missing values\n"
      ],
      "metadata": {
        "id": "7tuWaD4Q_bkg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean = df.dropna()\n",
        "print(\"After droping all missing values: \", df_clean.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7D061nhJ_b9Y",
        "outputId": "ad18389d-6bb7-4d2e-a785-497bac267cf1"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After droping all missing values:  (1000, 4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6.What are the most frequent categories in the data? Write your observation in words."
      ],
      "metadata": {
        "id": "F5YsvslD_ccS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " The most common categories are probibly the availability status of the books and the ratings, since the availability status of the books are needed for every single book, and the ratings are also found for every book and sometimes are more than 1 review, Also most of the reviews are probibly 4 stars or 3, meaning the site has average books acording to reviewrs and readers."
      ],
      "metadata": {
        "id": "jpRE5W6jAjCX"
      }
    }
  ]
}
